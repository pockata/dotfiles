[alias]
    co = checkout
    cob = checkout -b
    c = commit
    cm = commit -m
    ca = commit --amend
    cA = commit --amend --reuse-message=HEAD
    st = status -s
    br = branch
    diff = diff --word-diff
    mt = mergetool --tool=diffconflicts

    # helper
    log-format = log --decorate  --pretty=oneline --abbrev-commit --pretty=format:'%C(yellow)%h %Cred%d %Creset%s %C(green)(%cr) %C(blue)<%cn>' --date=format:'%d-%m-%Y'
    l = !git log-format --graph
    la = log --graph --decorate --pretty=oneline --abbrev-commit --all --pretty=format:'%C(yellow)%h %Cred%d %Creset%s %C(green)(%cr) %C(blue)<%cn>' --date=short

    # show repo activity (branch, last commiter name + date)
    # https://www.alexkras.com/19-git-tips-for-everyday-use/#find-old-branches
    activity = "!f() { git for-each-ref --sort=committerdate --format='%(refname:short) * %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'; }; f"

    # fetch pull requests from github so you can 'git checkout pull/123' and test them locally
    fetch-pull-requests = fetch origin '+refs/pull/*/head:refs/remotes/origin/pull/*'

    # edit global config in default editor
    ec = config --global -e
    ce = !git ec

    # Delete branches that have been merged into branch [master]
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -D; }; f"

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

    # List all commiters in the current branch
    commiters = !"_() { git log --pretty=format:%an $@ | sort -u; }; _"

    # List deleted files 
    deleted = !"_() { git log --diff-filter=D --summary | grep delete; }; _"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -avv
    remotes = remote -v

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log-format -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log-format --grep=$1; }; f"

    # List all aliases
    #la = "!git config -l | grep alias | cut -c 7-"

    # Diff staged files with the latest commit (if commit hash is not provided)
    dc = diff --staged
    ds = diff --staged

    # http://stackoverflow.com/questions/1139762/ignore-files-that-have-already-been-committed-to-a-git-repository
    untrack = update-index --assume-unchanged
    untracked = !git untrack
    ignored = !git ls-files -v | grep "^[[:lower:]] | cut -f2 -d' '"

    unstage = reset HEAD
    # Undo your last commit, but don't throw away your changes
    undo = reset --soft HEAD^

    # Shows commits not pushed to origin
    unpushed = "!git l --no-merges ${1:-'@{u}'}.."

    # Check which changes you're about to pull
    ; unpulled = "!git fetch && git l --no-merges ..origin/$(git rev-parse --abbrev-ref HEAD)"
    unpulled = "!git fetch && git l --no-merges ..${1:-'@{u}'}"

    # https://github.com/git-tips/tips
    # changes made to the branch since forked from master
    since-forked = "!git log-format --no-merges ${1:-master}.."
    # changes made to the master since forked
    after-forked = "!git log-format --no-merges ..${1:-master}"
[user]
    name = Rosen Stoyanov
    email = me@pockata.org
[credential]
    helper = cache --timeout=3600
[color]
	branch = auto
	diff = auto
	status = auto
	ui = auto
	interactive = auto
[apply]
    # Detect whitespace errors when applying a patch
    whitespace = nowarn
[core]
	editor = $EDITOR
	pager = diff-so-fancy | less --tabs=4 -RFX
	autocrlf = input
[push]
	default = current
[pull]
	rebase = true
[diff]
	mnemonicprefix = true
	identheuristic = true
	tool = vimdiff
[merge]
	stat = true
	tool = diffconflicts
    prompt = true
[mergetool "diffconflicts"]
	cmd = diffconflicts vim $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true
    # Don't create .orig files
    keepBackup = false
[mergetool]
	keepBackup = false
[mergetool "vimdiff"]
  cmd = vim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[url "git@github.com:"]
	insteadOf = https://github.com/
