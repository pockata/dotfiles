[alias]
    co = checkout
    cob = checkout -b
    c = commit --verbose
    cm = commit -m
    ca = commit --amend
    cA = commit --amend --reuse-message=HEAD
    st = status -s
    br = branch
    diff = diff --word-diff
    mt = mergetool --tool=diffconflicts
    rhh = reset HEAD --hard
    rbm = rebase master

	jump = "!/usr/share/git/git-jump/git-jump"

    # helper
    log-format = log --color=always --decorate --pretty=oneline --abbrev-commit --pretty=format:'%C(green)%cd %C(yellow)%h%Cred%d %Creset%s %C(blue)<%an>' --date=short
    l = log-format --graph
    la = log-format --graph --all
    today = log-format --since=7am

    # show repo activity (branch, last commiter name + date)
    # https://www.alexkras.com/19-git-tips-for-everyday-use/#find-old-branches
    activity = "!f() { git for-each-ref --sort=committerdate --format='%(refname:short) * %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'; }; f"

    # fetch pull requests from github so you can 'git checkout pull/123' and test them locally
    fetch-pull-requests = "!f() { local br=\"${1-origin}\"; git fetch \"${br}\" \"+refs/pull/*/head:refs/remotes/${br}/pull/*\"; }; f"

    # reset branch to it's tracking branch
    # https://stackoverflow.com/a/33244119
    reset-upstream = "!f(){ echo -n \"reset $(git symbolic-ref -q --short HEAD) to $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD))? (y/N) \"; read -r ans; if [ \"$ans\" = \"y\" -o \"$ans\" = \"Y\" ]; then git reset --hard $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)); else echo \"catchup aborted\"; fi }; f"

    # edit global config in default editor
    ec = config --global -e
    ce = !git ec

    fp = fetch --prune
    # push with force, but don't overwrite if someone else has already pushed
    push-f = push --force-with-lease

    # make a WIP commit
    # TODO: Check if prev commit is a WIP and ammend it
    wip = "!git add -A && git commit --no-verify -m \"chore: WIP [skip ci]\""

    # Delete branches that have been merged into branch [master]
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -D; }; f"
    whatdidipull = "!f() { git diff --patch-with-stat ${1-master}@{1} ${1-master}; }; f"
    undelete = "!f() { git checkout $(git rev-list -n 1 HEAD -- \"$1\")~1 -- \"$1\"; }; f"

    # Remove remote branches already merged into master
    cleanremote = "!f() { git branch -r --merged | grep -v master | sed 's/origin\\///' | xargs -n 1 git push --delete origin; }; f"

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

    # List all commiters in the current branch
    committers = !"_() { git log --pretty=format:%an $@ | sort -u; }; _"

    # List deleted files
    deleted = !"_() { git log --diff-filter=D --summary | grep delete; }; _"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -avv
    remotes = remote -v

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log-format -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log-format --grep=$1; }; f"

    # List all aliases
    #la = "!git config -l | grep alias | cut -c 7-"

    # Diff staged files with the latest commit (if commit hash is not provided)
    dc = diff --staged
    ds = diff --staged

    # http://stackoverflow.com/questions/1139762/ignore-files-that-have-already-been-committed-to-a-git-repository
    untrack = update-index --assume-unchanged
    untracked = !git untrack
    ignored = !git ls-files -v | grep "^[[:lower:]] | cut -f2 -d' '"

    unstage = reset HEAD
    # Undo your last commit, but don't throw away your changes
    undo = !"bash -c 'f() { local msg=\"$(git log -1 --pretty=%B)\"; if [[ $msg != \"WIP\"* && $msg != \"chore: WIP\"* ]]; then echo -n \"commit is not a WIP commit. Are you sure you want to undo it? (y/N): \"; read -r ans; if [ \"$ans\" = \"y\" -o \"$ans\" = \"Y\" ]; then echo \"Undoing...\"; else echo \"Aborted.\"; return; fi; fi; git reset --soft HEAD^; }; f'"

    ; undo = !echo -n 'Confirm (y/N): ' && read 'x' && [ $x = 'y' ] && echo "woo"

    # Shows commits not pushed to origin
    unpushed = "!git l --no-merges ${1:-'@{u}'}.."

    # Check which changes you're about to pull
    ; unpulled = "!git fetch && git l --no-merges ..origin/$(git rev-parse --abbrev-ref HEAD)"
    unpulled = "!git fetch && git l --no-merges ..${1:-'@{u}'}"

    # https://github.com/git-tips/tips
    # changes made to the branch since forked from master
    since-forked = "!git log-format --no-merges ${1:-master}.."
    # changes made to the master since forked
    after-forked = "!git log-format --no-merges ..${1:-master}"
[user]
    name = Rosen Stoyanov
    email = me@pockata.org
    signingkey = D01D67063DF187942BB4C9451805A1B84632D0EE
[credential]
    helper = cache --timeout=3600
[interactive]
    diffFilter = delta --color-only --diff-so-fancy
[color]
    branch = auto
    diff = auto
    status = auto
    ui = auto
    interactive = auto
[apply]
    # Detect whitespace errors when applying a patch
    whitespace = nowarn
[core]
    editor = $EDITOR
	pager = delta --wrap-max-lines 0 --diff-so-fancy --file-decoration-style ul --hunk-header-decoration-style ul
    autocrlf = input
[push]
    default = current
[pull]
    rebase = true
    ff = only
[diff]
    mnemonicprefix = true
    identheuristic = true
    tool = vimdiff
    algorithm = histogram
    colorMoved = default
[merge]
    stat = true
    tool = diffconflicts
    prompt = true
    conflictstyle = diff3
[mergetool "diffconflicts"]
    cmd = "nvim -c DiffConflictsWithHistory \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\""
    trustExitCode = true
    # Don't create .orig files
    keepBackup = false
[mergetool]
    keepBackup = false
[mergetool "vimdiff"]
    cmd = vim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

# causes problems when setting up the pc for the first time. starting up neovim
# (and automatically downloading plugins) doesn't work because there's no ssh
# key yet.
[url "git@github.com:"]
    insteadOf = https://github.com/

[commit]
    gpgsign = true

[init]
	defaultBranch = main
[delta]
    navigate = true  # use n and N to move between diff sections
    line-numbers = true
    ; side-by-side = true
[branch]
	sort = -committerdate

[include]
    path = ~/.gitconfig.local
