" vim: set foldmethod=marker foldlevel=0:
" ============================================================================
" My minimal .vimrc
" ============================================================================

" ============================================================================
" VIM-PLUG BLOCK {{{
" ============================================================================
silent! if plug#begin('~/.vim/plugged')

" colorschemes / start screen
Plug 'morhetz/gruvbox'
Plug 'mhinz/vim-startify', { 'on': 'Startify'}

" additional text objects
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-entire'
Plug 'whatyouhide/vim-textobj-xmlattr'
Plug 'Chun-Yang/vim-textobj-chunk'
Plug 'PeterRincker/vim-argumentative'
Plug 'vimtaku/vim-textobj-keyvalue'
Plug 'zandrmartin/vim-textobj-blanklines'

" additional key mappings
Plug 'rhysd/clever-f.vim' " GOLDEN
Plug 'bkad/CamelCaseMotion'
Plug 'scrooloose/nerdcommenter'
Plug 'christoomey/vim-tmux-navigator'

" text manipulation / display
Plug 'Raimondi/delimitMate'
Plug 'FooSoft/vim-argwrap', { 'on': 'ArgWrap' }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch', { 'on': ['Remove', 'Unlink', 'Move', 'Rename', 'Chmod', 'Mkdir', 'Find', 'Locate', 'Wall', 'SudoWrite', 'SudoEdit'] }
Plug 'tpope/vim-repeat'
Plug 'Valloric/MatchTagAlways'
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }

" code/project management
Plug 'airblade/vim-gitgutter'
Plug 'dbakker/vim-projectroot'
"Plug '/airblade/vim-rooter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sleuth'
"Plug 'jmcantrell/vim-diffchanges', { 'on': 'DiffChangesDiffToggle' }
Plug 'yssl/QFEnter'
Plug 'junegunn/gv.vim', { 'on': 'GV' }
Plug 'rhysd/committia.vim'
Plug 'rhysd/conflict-marker.vim'
Plug 'moll/vim-bbye'

" code searching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'pgdouyon/vim-evanesco'

" navigation
Plug 'scrooloose/nerdtree', { 'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFind', 'NERDTreeOpen'] }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFind', 'NERDTreeOpen'] }
Plug 't9md/vim-choosewin', { 'on': ['<Plug>(choosewin)', 'ChooseWin'] }
Plug 'terryma/vim-smooth-scroll'
Plug 'itchyny/vim-cursorword'
Plug 'kana/vim-smartword'
Plug 'kana/vim-niceblock'
Plug 'talek/obvious-resize'

" completion
Plug 'lifepillar/vim-mucomplete'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'jsx' }
Plug 'ternjs/tern_for_vim', { 'do': 'npm install', 'for': 'javascript' }
Plug 'junegunn/vim-peekaboo'

" extra language support
Plug 'scrooloose/syntastic'
Plug 'thinca/vim-ref', { 'on': 'Ref' }
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}

" statusline
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" misc
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
"Plug 'benmills/vimux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'wesQ3/vim-windowswap'
Plug 'osyo-manga/vim-over'
Plug 'chrisbra/NrrwRgn'

Plug 'AndrewRadev/undoquit.vim'

call plug#end()
endif

" }}}
" ============================================================================
" BASIC SETTINGS {{{
" ============================================================================

" Leader
let mapleader="\<Space>"
let g:mapleader="\<Space>"

set encoding=utf-8 nobomb

syntax on

set t_Co=256
set background=dark
"set t_ut=

let g:gruvbox_contrast_light = 'medium'
let g:gruvbox_contrast_dark = 'hard'

colorscheme gruvbox

filetype plugin indent on

set ttyfast
set shortmess+=Ic
set smartindent
set gdefault
set hidden
set switchbuf=useopen,usetab
set synmaxcol=300
set virtualedit=onemore,block
set nofoldenable
set foldmethod=indent
set foldlevel=8
set foldminlines=3

" when termguicolors renders black/white
" :h xterm-true-color
"set t_8f=[38;2;%lu;%lu;%lum
"set t_8b=[48;2;%lu;%lu;%lum

if has('termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

set timeoutlen=500
set ttimeoutlen=0

set autoindent

" This is set low so that gitgutter updates reasonably quickly
" https://github.com/airblade/vim-gitgutter#when-are-the-signs-updated
set updatetime=300
set nostartofline
set showcmd
set mouse=a
set formatoptions+=rotcj
set complete-=i
set completeopt-=preview
set completeopt+=menu,menuone,noinsert,noselect
set splitright
set splitbelow
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set lazyredraw
set shiftround
set showbreak=↪\
set breakindent
set list
set listchars=tab:→\ ,trail:·,extends:›,precedes:‹,nbsp:.
set history=700
set autoread
set scrolloff=5
set sidescroll=1
set sidescrolloff=15
set scrolljump=1 " TODO: This was 5
set winminheight=0
set winminwidth=0
set wildmenu
set diffopt+=vertical
set ruler
set cursorline relativenumber number
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set nowrap
set clipboard=unnamedplus
set noshowmode
set ignorecase
set smartcase
set hlsearch
set incsearch
set magic
set showmatch

" How many tenths of a second to blink when matching brackets
"set mat=2

set noerrorbells
set novisualbell
set t_vb=
set tm=500
set noswapfile

" Let's save undo info
if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "", 0700)
endif

set undofile
set undodir=~/.vim/undo//
set undolevels=500
set undoreload=500
set viminfo^=%
set laststatus=2
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" FOOBAR=~/<CTRL-><CTRL-F>
set isfname-==

" Change shape of cursor in different modes
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\e[3 q\<Esc>\\"
else
    let &t_SI = "\e[5 q"
    let &t_SR = "\e[3 q"
    let &t_EI = "\e[2 q"
endif

" }}}
" ============================================================================
" MAPPINGS {{{
" ============================================================================

" ----------------------------------------------------------------------------
" terminal specific (urxvt)
" ----------------------------------------------------------------------------

" Use ctrl + semicolon mapping
" http://stackoverflow.com/a/28276482/334432
nmap  [; <C-Semicolon>

" Switch between tabs with alt + num
execute "set <M-1>=\e1"
execute "set <M-2>=\e2"
execute "set <M-3>=\e3"
execute "set <M-4>=\e4"
nnoremap <M-1> 1gt
nnoremap <M-2> 2gt
nnoremap <M-3> 3gt
nnoremap <M-4> 4gt
inoremap <M-1> <ESC>1gt
inoremap <M-2> <ESC>2gt
inoremap <M-3> <ESC>3gt
inoremap <M-4> <ESC>4gt

" ----------------------------------------------------------------------------
" Quickfix
" ----------------------------------------------------------------------------

nnoremap <silent> <C-W>z :wincmd z<Bar>cclose<Bar>lclose<CR>

" ----------------------------------------------------------------------------
" Unimpaired
" ----------------------------------------------------------------------------
nnoremap <silent> [l :<C-U>lprevious<CR>
nnoremap <silent> ]l :<C-U>lnext<CR>
nnoremap <silent> [q :<C-U>cprevious<CR>
nnoremap <silent> ]q :<C-U>cnext<CR>

" ----------------------------------------------------------------------------
" Saving
" ----------------------------------------------------------------------------
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>

" ----------------------------------------------------------------------------
" vimrc
" ----------------------------------------------------------------------------

" Quickly reload the vimrc file
nmap <silent> <leader>sv :so ~/.vimrc<CR>:AirlineRefresh<CR>
" Source individual lines
nnoremap <leader>S ^vg_y:execute @@<CR>:echo 'Sourced line.'<CR>
vnoremap <leader>S y:@"<CR>:echo 'Sourced lines.'<CR>

" ----------------------------------------------------------------------------
" Formatting
" ----------------------------------------------------------------------------

nnoremap <leader>p p`[v`]=

" Superseded by LSP in supported file formats
" Reformat whole file and move back to original position
nnoremap g= gg=G``

" ----------------------------------------------------------------------------
" Builtins
" ----------------------------------------------------------------------------

" Execute macro in q
map Q @q
map K <Nop>

" Go to first character of line on first press
" Go to start of line on second press
" http://ddrscott.github.io/blog/2016/vim-toggle-movement/
function! ToggleHomeZero()
    let pos = getpos('.')
    execute "normal! ^"
    if pos == getpos('.')
        execute "normal! 0"
    endif
endfunction

nnoremap <silent> 0 :call ToggleHomeZero()<CR>

" Alternate file
nnoremap <Leader>o <C-^>

" ----------------------------------------------------------------------------
" Tabs
" ----------------------------------------------------------------------------
nnoremap <C-W>t <C-W>T
map <C-t> <esc>:tabnew<CR>

" ----------------------------------------------------------------------------
" Setting workdir
" ----------------------------------------------------------------------------
nnoremap <silent> <Leader>cd :lcd %:p:h<CR>
nnoremap <silent> <Leader>cp :ProjectRootLCD<CR>

" ----------------------------------------------------------------------------
" Readline-style key bindings in command-line (excerpt from rsi.vim)
" ----------------------------------------------------------------------------
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\<Lt>Right>"

" Make Ctrl-a/e jump to the start/end of the current line in the insert mode
inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>^

" move horizontally
nnoremap z; 30zl
nnoremap zj 30zh

" ----------------------------------------------------------------------------
" Frequently Accessed Files
" ----------------------------------------------------------------------------
nmap <silent> <leader>ev :execute 'vsplit ' . resolve(expand($MYVIMRC))<CR>
nmap <silent> <leader>eh :vsplit /etc/hosts<CR>

" ----------------------------------------------------------------------------
" HERESY (I find it more comfortable)
" ----------------------------------------------------------------------------
noremap j h
"noremap <silent> <expr> k (v:count == 0 ? 'gj' : 'j')
"noremap <silent> <expr> l (v:count == 0 ? 'gk' : 'k')
noremap k j
noremap l k
noremap ; l

noremap <C-w>j <C-w>h
noremap <C-w>k <C-w>j
noremap <C-w>l <C-w>k
noremap <C-w>; <C-w>l

" ----------------------------------------------------------------------------
" Jump in-between characters
" ----------------------------------------------------------------------------
" Make those behave like ci', ci", vi', vi"
nnoremap vi( f(vi(
nnoremap vi{ f{vi{
nnoremap vi[ f[vi[
nnoremap ci( f(ci(
nnoremap ci{ f{ci{
nnoremap ci[ f[ci[

" ----------------------------------------------------------------------------
" Visual block
" ----------------------------------------------------------------------------

" http://vimrcfu.com/snippet/77
vnoremap K :m '>+1<CR>gv=gv
vnoremap L :m '<-2<CR>gv=gv

" select pasted text
nmap gp `[v`]

" }}}
" ============================================================================
" FUNCTIONS & COMMANDS {{{
" ============================================================================

" }}}
" ============================================================================
" PLUGINS {{{
" ============================================================================

" avoid stupid menu.vim (saves ~100ms)
let g:did_install_default_menus = 1

" Disable netrw
let loaded_netrwPlugin = 1

" ----------------------------------------------------------------------------
" Undoquit
" ----------------------------------------------------------------------------
nnoremap <silent> <c-w>c :call undoquit#SaveWindowQuitHistory()<cr><c-w>c

" ----------------------------------------------------------------------------
" NrrwRgn
" ----------------------------------------------------------------------------
let g:nrrw_rgn_vert = 1
let g:nrrw_rgn_wdth = 85

" ----------------------------------------------------------------------------
" Syntastic
" ----------------------------------------------------------------------------
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_enable_signs = 1
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']
let g:syntastic_javascript_checkers = ['eslint', 'jshint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
"let g:syntastic_aggregate_errors = 1

" ----------------------------------------------------------------------------
" Airline
" ----------------------------------------------------------------------------
let g:airline_powerline_fonts = 1
let g:airline_theme = 'gruvbox'
let g:airline#extensions#tabline#tabs_label = 'party hard'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''

let g:airline#extensions#hunks#enabled = 0

" vim-windowswap integration
let g:airline#extensions#windowswap#enabled = 1
let g:airline#extensions#windowswap#indicator_text = 'SWAP'

" configure which whitespace checks to enable
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.linenr = ''

let g:airline_mode_map = {
        \ '__' : '------',
        \ 'n'  : 'N',
        \ 'i'  : 'I',
        \ 'R'  : 'R',
        \ 'v'  : 'V',
        \ 'V'  : 'V-L',
        \ 'c'  : 'C',
        \ '' : 'V-B',
        \ 's'  : 'S',
        \ 'S'  : 'S-L',
        \ '' : 'S-B',
        \ 't'  : 'T',
        \ }

" ----------------------------------------------------------------------------
" MUcomplete
" ----------------------------------------------------------------------------
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#chains = {}
let g:mucomplete#chains.default = ['file', 'omni', 'keyn', 'user']
let g:mucomplete#cycle_with_trigger = 1


" }}}
" ============================================================================
" AUTOCMD {{{
" ============================================================================

" update the matched search background to not obscure the cursor
highlight IncSearch guifg=purple guibg=white

" Highlight spelling errors (guitermfo
highlight SpellBad guifg=red

" highlight long lines (but only one column)
highlight ColorColumn guibg=#cc241d guifg=#fbf1c7 ctermbg=red ctermfg=white
let colorcolumn_blacklist = ['Startify', 'html', 'git', 'markdown', '']
autocmd BufWinEnter * if index(colorcolumn_blacklist, &ft) < 0 | call matchadd('ColorColumn', '\%81v', -1)

" make the ~ characters on empty lines 'invisible'
highlight EndOfBuffer ctermfg=bg guifg=bg

" make the precedes & extends characters purple
highlight NonText guifg=red

" reformat html -> each tag on own row
" nmap <leader><F3> :%s/<[^>]*>/\r&\r/g<cr>gg=G:g/^$/d<cr><leader>/

" ----------------------------------------------------------------------------
" DelimitMate
" ----------------------------------------------------------------------------
" Add proper indent when hitting <CR> inside curly braces
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_jump_expansion = 1
let g:delimitMate_balance_matchpairs = 0

" ----------------------------------------------------------------------------
" NERDTree
" ----------------------------------------------------------------------------
let g:NERDCustomDelimiters = {
    \ 'html': {  'left': '<!-- ', 'right': '-->', 'leftAlt': '/*','rightAlt': '*/' },
    \ 'xhtml': {  'left': '<!-- ', 'right': '-->', 'leftAlt': '/*','rightAlt': '*/'},
\}
let NERD_html_alt_style=1
let NERDTreeShowHidden=1
let NERDTreeHijackNetrw = 0
let NERDTreeMinimalUI = 1
let g:NERDTreeMapOpenInTab="<C-t>"
let g:NERDTreeMapOpenSplit="<C-s>"
let g:NERDTreeMapOpenVSplit="<C-v>"
let g:NERDTreeAutoCenter = 1
let g:NERDTreeWinSize = 25
let g:NERDTreeSortHiddenFirst = 1

" ----------------------------------------------------------------------------
" Clever f
" ----------------------------------------------------------------------------
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1
let g:clever_f_fix_key_direction = 1

" ----------------------------------------------------------------------------
" QFEnter
" ----------------------------------------------------------------------------
" http://vi.stackexchange.com/questions/8534/make-cnext-and-cprevious-loop-back-to-the-begining
let g:qfenter_open_map = ['<CR>', '<2-LeftMouse>']
let g:qfenter_vopen_map = ['<C-v>']
let g:qfenter_hopen_map = ['<C-s>']
let g:qfenter_topen_map = ['<C-t>']

" ----------------------------------------------------------------------------
" Peekaboo
" ----------------------------------------------------------------------------
" Delay opening of peekaboo window (in ms. default: 0)
let g:peekaboo_ins_prefix = '<c-x>'

" ----------------------------------------------------------------------------
" Windowswap
" ----------------------------------------------------------------------------
let g:windowswap_map_keys = 0 "prevent default bindings
nnoremap <silent> <C-W><C-W> :call WindowSwap#EasyWindowSwap()<CR>

" camelcasemotion
autocmd VimEnter * call camelcasemotion#CreateMotionMappings(',')

" PHP textobject
call textobj#user#plugin('php', {
\   'code': {
\     'pattern': ['<?php\>', '?>'],
\     'select-a': 'aP',
\     'select-i': 'iP',
\   },
\ })

autocmd! FileType ref-* setlocal number wrap
autocmd! FileType ref-* nnoremap <buffer> <silent> q :<C-u>close<CR>

let g:ref_open='vsplit'
cabbrev man Ref man

cabbrev bd Bdelete

cabbrev pc PlugClean
cabbrev ps PlugStatus
cabbrev pi PlugInstall
cabbrev pu PlugUpgrade \| PlugUpdate

" paste register content and escape it
cnoremap <c-x> <c-r>=<SID>PasteEscaped()<cr>
function! s:PasteEscaped()
    echo "\\".getcmdline()."\""
    let char = getchar()
    if char == "\<esc>"
        return ''
    else
        let register_content = getreg(nr2char(char))
        let escaped_register = escape(register_content, '\'.getcmdtype())
        return substitute(escaped_register, '\n', '\\n', 'g')
    endif
endfunction

" ----------------------------------------------------------------------------
" gv.vim / gl.vim
" ----------------------------------------------------------------------------
function! s:gv_expand()
    let line = getline('.')
    GV --name-status
    call search('\V'.line, 'c')
    normal! zz
endfunction

autocmd! FileType GV nnoremap <buffer> <silent> + :call <sid>gv_expand()<cr>

" Merge a tab into a split in the previous window
function! MergeTabs()
    if tabpagenr() == 1
        return
    endif

    let bufferName = bufname("%")

    if tabpagenr("$") == tabpagenr()
        close!
    else
        close!
        tabprev
    endif

    vsplit

    execute "buffer " . bufferName
endfunction

nmap <C-W>m :call MergeTabs()<CR>

" Execute macro over visual lines
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
    echo "@".getcmdline()
    execute ":'<,'>normal @".nr2char(getchar())
endfunction

" ----------------------------------------------------------------------------
" Argumentative
" ----------------------------------------------------------------------------
let g:argumentative_no_mappings = 1
nmap <Leader>aj <Plug>Argumentative_Prev
nmap <Leader>a; <Plug>Argumentative_Next
nmap <Leader>a< <Plug>Argumentative_MoveLeft
nmap <Leader>a> <Plug>Argumentative_MoveRight
xmap ia <Plug>Argumentative_InnerTextObject
xmap aa <Plug>Argumentative_OuterTextObject
omap ia <Plug>Argumentative_OpPendingInnerTextObject
omap aa <Plug>Argumentative_OpPendingOuterTextObject

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return pumvisible() ? "\<C-y>" : "\<Plug>delimitMateCR"
    "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

"function! CleverCr()
"  if pumvisible()
"      if neosnippet#expandable_or_jumpable()
"          return "\<Plug>(neosnippet_expand_or_jump)"
"        else
"          return "\<C-y>"
"      endif
"  else
"      return "\<Plug>delimitMateCR"
"  endif
"endfunction

" <CR> close popup and save indent or expand snippet
"imap <expr> <CR> CleverCr()
"imap <expr> <tab> neosnippet#jumpable() ?
"    \ "\<Plug>(neosnippet_jump)"
"    \ : pumvisible() ? "\<C-n>" : "\<tab>"


"smap <expr><tab> neosnippet#expandable_or_jumpable() ?
"      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"

" <TAB>: completion.

"inoremap <expr><S-TAB>   pumvisible() ? "\<C-p>" : "\<C-h>"

autocmd FileType html       setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType python     setlocal omnifunc=pythoncomplete#Complete
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css        setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType xml        setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType php        setlocal omnifunc=phpcomplete#CompletePHP
autocmd FileType c          setlocal omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby setlocal omnifunc=rubycomplete#Complete

"autocmd Filetype javascript setlocal omnifunc=tern#Complete
au FileType markdown,gitcommit setlocal spell

" Delete all hidden buffers
nnoremap <silent> <Leader><BS>b :call DeleteHiddenBuffers()<CR>
function! DeleteHiddenBuffers() " {{{
    let tpbl=[]

    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')

    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction " }}}

" ----------------------------------------------------------------------------
" FZF
" ----------------------------------------------------------------------------
let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

function! SearchVisualSelectionWithAg()
    execute 'Ag' s:getVisualSelection()
endfunction

function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
endfunction

nnoremap <silent> H :call SearchWordWithAg()<CR>
vnoremap <silent> H :call SearchVisualSelectionWithAg()<CR>

" Insert mode completion
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

nmap <Leader>h :History<CR>
nmap <Leader>j :Lines<CR>
nmap <Leader>r :BLines<CR>
nmap <Leader>w :Windows<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>c :Commands<CR>
nmap <Leader>gf :GitFiles?<CR>
nnoremap <leader>gs :tabedit %<CR>:Gstatus<CR>
nnoremap <leader>gw :Gwrite<CR>

" http://vim.wikia.com/wiki/Always_start_on_first_line_of_git_commit_message
autocmd! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
autocmd! BufReadPost fugitive://* set bufhidden=delete
autocmd! BufRead fugitive://* xnoremap <buffer> dp :diffput<CR>|xnoremap <buffer> do :diffget<CR>

" Jump to first file
autocmd! BufCreate .git/index :call feedkeys("\<C-n>")

" TODO: Improve/Remove this
" vimdiff current vs git head (fugitive extension)
" Close any corresponding fugitive diff buffer.
function! MyCloseDiff()
    if (&diff == 0 || getbufvar('#', '&diff') == 0)
                \ && (bufname('%') !~ '^fugitive:' && bufname('#') !~ '^fugitive:')
        echom "Not in diff view."
        return
    endif

    diffoff " safety net / required to workaround powerline issue

    " Close current buffer if alternate is not fugitive but current one is.
    if bufname('#') !~ '^fugitive:' && bufname('%') =~ '^fugitive:'
        if bufwinnr("#") == -1
            " XXX: might not work reliable (old comment)
            b #
            bd! #
        else
            bd!
        endif
    else
        bd! #
    endif
endfunction

" Maps related to version control (Git).
" Toggle `:Gdiff`.
nnoremap <Leader>gd :if !&diff \| tabedit % \| Gdiff \| else \| call MyCloseDiff() \| endif <cr>

" "wincmd p" might not work initially, although there are two windows.
fun! MyWincmdPrevious()
    let w = winnr()
    wincmd p
    if winnr() == w
        wincmd w
    endif
endfun
" Diff this window with the previous one.
command! DiffThese diffthis | call MyWincmdPrevious() | diffthis | wincmd p
command! DiffOff   Windo diffoff

" ----------------------------------------------------------------------------
" :Count
" ----------------------------------------------------------------------------
command! -nargs=1 Count execute printf('%%s/%s//gn', escape(<q-args>, '/')) | normal! ``

" ----------------------------------------------------------------------------
" Profile
" ----------------------------------------------------------------------------
function! s:profile(bang)
    if a:bang
        profile pause
        noautocmd qall
    else
        profile start /tmp/profile.log
        profile func *
        profile file *
    endif
endfunction
command! -bang Profile call s:profile(<bang>0)

nnoremap <silent> <leader>aw :ArgWrap<CR>
nnoremap <expr> <c-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"

nnoremap <silent> <Leader>u :UndotreeToggle<CR>
" If undotree is opened, it is likely one wants to interact with it.
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 2

" TODO: figure out evanesco workaround
"nnoremap n nzzzv
"nnoremap N Nzzzv

" https://technotales.wordpress.com/2010/04/29/vim-splits-a-guide-to-doing-exactly-what-you-want/
" Smarter? splits
" window
nmap <Leader>swj :topleft  vnew<CR>
nmap <Leader>sw; :botright vnew<CR>
nmap <Leader>swl :topleft  new<CR>
nmap <Leader>swk :botright new<CR>

" buffer
nmap <Leader>sj :leftabove  vnew<CR>
nmap <Leader>s; :rightbelow vnew<CR>
nmap <Leader>sl :leftabove  new<CR>
nmap <Leader>sk :rightbelow new<CR>

" ----------------------------------------------------------------------------
" GitGutter
" ----------------------------------------------------------------------------
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs = 200
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 1
let g:gitgutter_override_sign_column_highlight = 0

let g:gitgutter_sign_added = '▌'
let g:gitgutter_sign_modified = '▐'
let g:gitgutter_sign_removed = '▖'
let g:gitgutter_sign_removed_first_line = '▘'
let g:gitgutter_sign_modified_removed = '▞'

highlight clear SignColumn
highlight GitGutterAdd guibg=bg guifg=#b8bb26
highlight GitGutterChange guibg=bg guifg=#fabd2f
highlight GitGutterDelete guibg=bg guifg=#fb4934
highlight GitGutterChangeDelete guibg=bg guifg=#fabd2f

" jump between changed areas (hunks)
nmap <silent> ]h :GitGutterNextHunk<CR>
nmap <silent> [h :GitGutterPrevHunk<CR>
" text objects for hunks
omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual
" stage/unstage hunk
nmap <Leader>hs <Plug>GitGutterStageHunk
"nmap <Leader>hu <Plug>GitGutterUndoHunk
" detailed preview of changes in hunk
nmap <Leader>hp <Plug>GitGutterPreviewHunk

" Show NERDTree
function! SmartNERDTree()
    if exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1
        :NERDTreeClose
    else
        " TODO: Recreate functionality of ProjectRootExe & remove plugin
        :ProjectRootExe NERDTreeFind
    endif
endfunction

map <silent> <Leader>kb :call SmartNERDTree()<cr>

function! s:startup()
    if exists('g:loaded_startify')
        return
    endif

    let cnt = argc()
    if (cnt == 0 || cnt == 1 && isdirectory(argv(0)))
        Startify
        NERDTree
        wincmd w
    endif
endfunction

autocmd VimEnter * call s:startup()
autocmd User Startified nnoremap <buffer> k j
autocmd User Startified nnoremap <buffer> l k

" ----------------------------------------------------------------------------
" Startify
" ----------------------------------------------------------------------------
let g:startify_change_to_dir = 0
let g:startify_list_order = [
  \ ['   MRU '. getcwd()], 'dir',
  \ ['   MRU'],            'files',
  \ ['   Sessions'],       'sessions',
  \ ['   Bookmarks'],      'bookmarks',
  \ ['   Commands'],       'commands',
  \ ]
let g:startify_custom_header =
    \ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']

" ----------------------------------------------------------------------------
" Vim Plug
" ----------------------------------------------------------------------------
let g:plug_window = 'tabnew'
let g:plug_pwindow = 'vertical rightbelow new'

augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd WinEnter,BufEnter * setlocal cursorline
    autocmd WinLeave,BufLeave * setlocal nocursorline
augroup END

" :W sudo saves the file
command! W w !sudo tee % > /dev/null

" Use <C-L> to clear the highlighting of :set hlsearch.
nnoremap <silent> <Leader>l :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

augroup diff_update
    au!
    au BufWritePost * if &diff == 1 | diffupdate | endif
augroup END

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
endif

" ----------------------------------------------------------------------------
" TMUX Navigator
" ----------------------------------------------------------------------------
let g:tmux_navigator_no_mappings = 1
noremap <silent> <C-j> :TmuxNavigateLeft<CR>
noremap <silent> <C-k> :TmuxNavigateDown<CR>
noremap <silent> <C-l> :TmuxNavigateUp<CR>
noremap <silent> <C-Semicolon> :TmuxNavigateRight<CR>

" ----------------------------------------------------------------------------
" Obvious Resize
" ----------------------------------------------------------------------------
let g:obvious_resize_default = 5
noremap <silent> <Up> :<C-U>ObviousResizeUp<CR>
noremap <silent> <Down> :<C-U>ObviousResizeDown<CR>
noremap <silent> <Left> :<C-U>ObviousResizeLeft<CR>
noremap <silent> <Right> :<C-U>ObviousResizeRight<CR>

" ----------------------------------------------------------------------------
" ChooseWin
" ----------------------------------------------------------------------------
" invoke with '-'
nmap - <Plug>(choosewin)
let g:choosewin_overlay_enable = 1
let g:choosewin_blink_on_land = 0
let g:choosewin_overlay_clear_multibyte = 1

" let terminal resize scale the internal windows
" http://vimrcfu.com/snippet/186
"autocmd VimResized * silent! :wincmd =

"https://www.reddit.com/r/vim/comments/3er2az/how_to_suppress_vims_warning_editing_a_read_only/
au BufEnter * set noro

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Delete tra iling white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
autocmd BufWrite *.js :call DeleteTrailingWS()
autocmd BufWrite *.jsx :call DeleteTrailingWS()
autocmd BufWrite *.scss :call DeleteTrailingWS()
autocmd BufWrite *.html :call DeleteTrailingWS()
autocmd BufWrite *.css :call DeleteTrailingWS()
autocmd BufWrite *.php :call DeleteTrailingWS()
autocmd BufWrite *.json :call DeleteTrailingWS()
autocmd BufWrite *.sh :call DeleteTrailingWS()
autocmd BufWrite *.c :call DeleteTrailingWS()
autocmd BufWrite *.cpp :call DeleteTrailingWS()

" identify sass files as such
autocmd BufNewFile,BufRead *.scss set ft=scss.css sw=4
autocmd BufNewFile,BufRead *.jsx set ft=javascript.jsx sw=4

autocmd Filetype css setlocal iskeyword-=-:

" Enhance `gf`, use these file extensions
" https://www.reddit.com/r/vim/comments/4kjgmz/weekly_vim_tips_and_tricks_thread_11/d3g6l8y
autocmd FileType javascript setl suffixesadd=.js,.jsx,.json,.html

" Faster scroll
function! s:Smoothie(functionToExecute, params) abort
    let setVars = &number

    if setVars
        setlocal nocursorline norelativenumber
    endif
    call call(a:functionToExecute, a:params)

    if setVars
        setlocal cursorline relativenumber
    endif
endfunction

noremap <silent> <c-u> :call <SID>Smoothie('smooth_scroll#up', [&scroll, 0, 2])<CR>
noremap <silent> <c-d> :call <SID>Smoothie('smooth_scroll#down', [&scroll, 0, 2])<CR>
noremap <silent> <c-b> :call <SID>Smoothie('smooth_scroll#up', [&scroll*2, 0, 4])<CR>
noremap <silent> <c-f> :call <SID>Smoothie('smooth_scroll#down', [&scroll*2, 0, 4])<CR>

function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        exec t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction

command! ZoomToggle call s:ZoomToggle()
" TODO: auto open/close NERDTree
nnoremap <silent> <C-w>o :ZoomToggle<CR>
nnoremap <silent> <C-w><C-o> :ZoomToggle<CR>

" ----------------------------------------------------------------------------
" Get Visual Selection helper function
" ----------------------------------------------------------------------------
function! s:getVisualSelection() range
    let old_reg = getreg('"')
    let old_regtype = getregtype('"')
    let old_clipboard = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', old_reg, old_regtype)
    let &clipboard = old_clipboard
    return selection
endfunction

" ----------------------------------------------------------------------------
" Help in new tabs
" ----------------------------------------------------------------------------
function! s:helptab()
    if &buftype == 'help'
        wincmd T
        nnoremap <buffer> q :q<cr>
    endif
endfunction
autocmd BufEnter *.txt silent! call s:helptab()

" ----------------------------------------------------------------------------
" Clean empty buffers
" http://stackoverflow.com/a/10102604
" ----------------------------------------------------------------------------
function! s:CleanEmptyBuffers()
    let buffers = filter(range(0, bufnr('$')), 'buflisted(v:val) && empty(bufname(v:val)) && bufwinnr(v:val)<0')
    if !empty(buffers)
        silent! exe 'bw '.join(buffers, ' ')
    endif
endfunction

autocmd BufHidden * silent! call <SID>CleanEmptyBuffers()

" ----------------------------------------------------------------------------
" Switch to us layout
" https://zenbro.github.io/2015/07/24/auto-change-keyboard-layout-in-vim.html
" ----------------------------------------------------------------------------
function! RestoreKeyboardLayout(key)
    call system('xkb-switch -s us')
    execute 'normal! ' . a:key
endfunction
nnoremap <silent> й :call RestoreKeyboardLayout('h')<CR>
nnoremap <silent> к :call RestoreKeyboardLayout('j')<CR>
nnoremap <silent> л :call RestoreKeyboardLayout('k')<CR>

" follow symlinked file
function! FollowSymlink()
    let current_file = expand('%:p')
    " check if file type is a symlink
    if getftype(current_file) == 'link'
        " if it is a symlink resolve to the actual file path
        "   and open the actual file
        let actual_file = resolve(current_file)
        execute 'file ' . actual_file

        redraw
    end
endfunction

" follow symlink and set working directory
autocmd BufReadPost * call FollowSymlink()
" TODO: Replace with Glcd
autocmd BufWinEnter * ProjectRootLCD

" a little more informative version of the above
nmap <Leader>sI :call <SID>SynStack()<CR>

function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" ----------------------------------------------------------------------------
" Todo
" ----------------------------------------------------------------------------

" TODO: Add bang! option to use regex without semicolon
function! s:todo() abort
    let entries = []
    for cmd in ['ag --vimgrep --hidden "(TODO|FIXME|XXX|NOTE|OPTIMIZE|HACK|BUG):" 2> /dev/null']

        let lines = split(system(cmd), '\n')
        if v:shell_error != 0 | continue | endif

        for line in lines
            let lst = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')
            if len(lst) < 1 | continue | endif

            let [fname, lno, text] = lst[1:3]

            " grab text after todo/fixme/xxx tag
            let mt = matchlist(text, '\(TODO\|FIXME\|XXX\|NOTE\|OPTIMIZE\|HACK\|BUG\):\(.*\)')[1:2]

            call add(entries, { 'filename': fname, 'lnum': lno, 'text': join(mt, ':') })
        endfor
        break
    endfor

    if !empty(entries)
        call setqflist(entries)
        copen
    endif
endfunction
command! Todo call s:todo()

" }}}

